from hashlib import *
from pwn import p64

# Currently works only for md5 hashes
"""
Step 1: Get the values of data, append, length of the string from the user
Step 2: (i) Pad the secret+data with '1' and '0's such that the resultant length
            becomes congruent to 56 modulus 64
        (ii) Convert length of secret+data in bytes to bits and represent it in
            64 bit little endian
Step 3: Send the padded secret+data to the server and get the hash (Let this
        hash be h1)
Step 4: Append append_string to this hash and send the hash again to the server
Step 5: The output hash contains the secret. So we calculated the hash of a
        string containing secret without actually knowing the secret
        Moral of the story: Use HMAC
"""

obj1 = md5()

def padding(text):
    pt_hex = text.encode("hex") + "80"
    while len(pt_hex)/2 % 64 != 56:
        pt_hex += "00"
    pt_hex += p64(len(text)*8).encode("hex")
    return pt_hex.decode("hex")

def hash_len_exploit():



if '__name__' == '__main__':
    hash_algo = raw_input("Enter the hashing algorithm: ")
    if hash_algo == "md5":
        data = raw_input("Enter the data to be signed: ")
        append = raw_input("Enter the string to be appended: ")
